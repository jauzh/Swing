package UserInterface;


import Business.VitalSign;
import Business.VitalSignHistory;
import java.awt.Color;
import javax.swing.JFrame;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;

/**
 * A simple demonstration application showing how to create a line chart using
 * data from an {@link XYDataset}.
 *
 */
public class VitalSignChart extends JFrame {

    VitalSignHistory vitalSignHistory;

    /**
     * Creates a new demo.
     *
     * @param title the frame title.
     */
    public VitalSignChart(final String title, VitalSignHistory vitalSignHistory) {

        super(title);
        this.vitalSignHistory = vitalSignHistory;

        final XYDataset dataset = createDataset();
        final JFreeChart chart = createChart(dataset);
        final ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
        setContentPane(chartPanel);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);

    }

    /**
     * Creates a sample dataset.
     *
     * @return a sample dataset.
     */
    private XYDataset createDataset() {

        final XYSeries respirationRate = new XYSeries("Respiration Rate");
        final XYSeries heartRate = new XYSeries("Heart Rate");
        final XYSeries systolicBloodPressure = new XYSeries("Systolic Blood Pressure");
        final XYSeries weight = new XYSeries("Weight");

        int i = 1;
        for (VitalSign vitalSign : vitalSignHistory.getVitalSignList()) {
            respirationRate.add(i, vitalSign.getRespiratoryRate());
            heartRate.add(i, vitalSign.getHeartRate());
            systolicBloodPressure.add(i, vitalSign.getSystolicBloodPressure());
            weight.add(i, vitalSign.getWeight());
            i++;
        }

        final XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(respirationRate);
        dataset.addSeries(heartRate);
        dataset.addSeries(systolicBloodPressure);
        dataset.addSeries(weight);

        return dataset;

    }

    /**
     * Creates a chart.
     *
     * @param dataset the data for the chart.
     *
     * @return a chart.
     */
    private JFreeChart createChart(final XYDataset dataset) {

        // create the chart...
        final JFreeChart chart = ChartFactory.createXYLineChart(
                "Vital Sign History", // chart title
                "Timestamp", // x axis label
                "Results", // y axis label
                dataset, // data
                PlotOrientation.VERTICAL,
                true, // include legend
                true, // tooltips
                false // urls
        );

        // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
        chart.setBackgroundPaint(Color.white);

//        final StandardLegend legend = (StandardLegend) chart.getLegend();
        //      legend.setDisplaySeriesShapes(true);
        // get a reference to the plot for further customisation...
        final XYPlot plot = chart.getXYPlot();
        plot.setBackgroundPaint(Color.lightGray);
        //    plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);

        final XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
//        renderer.setSeriesLinesVisible(0, false);
//        renderer.setSeriesShapesVisible(1, false);
        plot.setRenderer(renderer);

        // change the auto tick unit selection to integer units only...
        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        // OPTIONAL CUSTOMISATION COMPLETED.

        return chart;

    }


}
